"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const util=require("util");function tree_diff_impl(e,i,n,o,t){let f={only_in_old:{},only_in_new:{},modified:{},unmodified:{}};const r=(e,i,n)=>{e[i]=n[i]};for(const _ in e)if(i.hasOwnProperty(_))if(n(e[_],t))n(i[_],t)&&o(e[_],i[_],t)?r(f.unmodified,_,e):r(f.modified,_,i);else{const r=tree_diff_impl(e[_],i[_],n,o,[...t,_]),d=e=>{for(const i in r[e])f[e].hasOwnProperty(_)||(f[e][_]={}),f[e][_][i]=r[e][i]};d("only_in_old"),d("only_in_new"),d("modified"),d("unmodified")}else r(f.only_in_old,_,e);for(const n in i)e.hasOwnProperty(n)||(f.only_in_new[n]=i[n]);return f}function tree_diff(e,i,n){const o=n.equal||((e,i,n)=>e==i);return tree_diff_impl(e,i,n.is_leaf,o,[])}exports.tree_diff=tree_diff;